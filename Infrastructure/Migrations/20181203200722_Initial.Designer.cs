// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20181203200722_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Core.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExternalId");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Domain.Core.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation");

                    b.Property<bool>("Actual");

                    b.Property<string>("Code");

                    b.Property<bool>("Default");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rate")
                        .HasColumnType("DECIMAL(18,6)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Domain.Core.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Domain.Core.Employer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AreaId");

                    b.Property<string>("Description");

                    b.Property<string>("ExternalId");

                    b.Property<string>("Name");

                    b.Property<string>("SiteUrl");

                    b.Property<int?>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("AreaId");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("Domain.Core.ProfessionalArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId");

                    b.Property<string>("Name");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("ProfessionalArea");
                });

            modelBuilder.Entity("Domain.Core.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId");

                    b.Property<bool?>("Laboring");

                    b.Property<string>("Name");

                    b.Property<long>("ProfessionalAreaId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.HasIndex("ProfessionalAreaId");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("Domain.Core.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptHandicapped");

                    b.Property<bool>("AcceptKids");

                    b.Property<bool>("Archived");

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<long>("EmployerId");

                    b.Property<int?>("Employment");

                    b.Property<int?>("Experience");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("HasTest");

                    b.Property<string>("KeySkills");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PublishedAt");

                    b.Property<int?>("Schedule");

                    b.Property<bool?>("TestRequired");

                    b.Property<int>("Type");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("Domain.EntityLinks.VacancySpecializationLink", b =>
                {
                    b.Property<long>("SpecializationId");

                    b.Property<long>("VacancyId");

                    b.HasKey("SpecializationId", "VacancyId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySpecializationLink");
                });

            modelBuilder.Entity("Domain.Core.Employer", b =>
                {
                    b.HasOne("Domain.Core.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.OwnsOne("Domain.Core.Logo", "Logo", b1 =>
                        {
                            b1.Property<long?>("EmployerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("MediumSize");

                            b1.Property<string>("OriginalSize");

                            b1.Property<string>("SmallSize");

                            b1.ToTable("Employer");

                            b1.HasOne("Domain.Core.Employer")
                                .WithOne("Logo")
                                .HasForeignKey("Domain.Core.Logo", "EmployerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Core.Specialization", b =>
                {
                    b.HasOne("Domain.Core.ProfessionalArea", "ProfessionalArea")
                        .WithMany("Specializations")
                        .HasForeignKey("ProfessionalAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Core.Vacancy", b =>
                {
                    b.HasOne("Domain.Core.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Core.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Core.Address", "Address", b1 =>
                        {
                            b1.Property<long?>("VacancyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Building");

                            b1.Property<string>("City");

                            b1.Property<string>("Description");

                            b1.Property<decimal?>("Latitude")
                                .HasColumnType("DECIMAL(18,6)");

                            b1.Property<decimal?>("Longitude")
                                .HasColumnType("DECIMAL(18,6)");

                            b1.Property<string>("Street");

                            b1.ToTable("Vacancy");

                            b1.HasOne("Domain.Core.Vacancy")
                                .WithOne("Address")
                                .HasForeignKey("Domain.Core.Address", "VacancyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.Core.Contact", "Contact", b1 =>
                        {
                            b1.Property<long?>("VacancyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Email");

                            b1.Property<string>("Name");

                            b1.Property<string>("PhoneNumbers");

                            b1.ToTable("Vacancy");

                            b1.HasOne("Domain.Core.Vacancy")
                                .WithOne("Contact")
                                .HasForeignKey("Domain.Core.Contact", "VacancyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.Core.Salary", "Salary", b1 =>
                        {
                            b1.Property<long?>("VacancyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Currency");

                            b1.Property<decimal?>("From")
                                .HasColumnType("DECIMAL(18,6)");

                            b1.Property<bool?>("Gross");

                            b1.Property<decimal?>("To")
                                .HasColumnType("DECIMAL(18,6)");

                            b1.ToTable("Vacancy");

                            b1.HasOne("Domain.Core.Vacancy")
                                .WithOne("Salary")
                                .HasForeignKey("Domain.Core.Salary", "VacancyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.EntityLinks.VacancySpecializationLink", b =>
                {
                    b.HasOne("Domain.Core.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Core.Vacancy", "Vacancy")
                        .WithMany("VacancySpecializationLinks")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
